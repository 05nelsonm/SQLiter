buildscript {
    repositories {
        jcenter()
        google()
        gradlePluginPortal()
        maven { url "https://dl.bintray.com/kotlin/kotlin-dev/" }
        maven { url "https://dl.bintray.com/kotlin/kotlin-eap/" }
        maven {
            url  "https://dl.bintray.com/jetbrains/kotlin-native-dependencies"
        }
    }

    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$BINTRAY_VERSION"
    }
}


plugins {
    id 'kotlin-multiplatform' version '1.3.0'
}
repositories {
    maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
    mavenCentral()
    if(project.hasProperty('j2objcMavenDeploy')) {
            maven {
                url project.property('j2objcMavenDeploy')
            }
        }
}
group 'com.example'
version '0.0.1'

apply plugin: 'maven-publish'

kotlin {
    targets {
        
        fromPreset(presets.jvm, 'jvm')
        
        // This preset is for iPhone emulator
        // Switch here to presets.iosArm64 to build library for iPhone device
        /*fromPreset(presets.iosX64, 'ios') {
            compilations.main.outputKinds('FRAMEWORK')
        }*/

        /*fromPreset(presets.macosX64, 'macos')
        fromPreset(presets.iosX64, 'iosX64')
        fromPreset(presets.iosArm32, 'iosArm32')
        fromPreset(presets.iosArm64, 'iosArm64')
        
        fromPreset(presets.macosX64, 'ios'){
            compilations.each {
                it.extraOpts("-linker-options", "-lsqlite3")
            }
            compilations.test {
                it.extraOpts("-native-library", "../KotlinCpp/bcdist/macos_x64/tlruntime.bc")
            }
        }*/

//                fromPreset(presets.macosX64, 'nativeCommon')
        
        fromPreset(presets.macosX64, 'macos'){
            compilations.each {
                it.extraOpts("-linker-options", "-lsqlite3")
            }
            compilations.test {
                it.extraOpts("-native-library", "../KotlinCpp/bcdist/macos_x64/tlruntime.bc")
            }
        }

        fromPreset(presets.iosX64, 'iosX64'){
            compilations.each {
                it.extraOpts("-linker-options", "-lsqlite3")
            }
        }
        fromPreset(presets.iosArm64, 'iosArm64'){
            compilations.each {
                it.extraOpts("-linker-options", "-lsqlite3")
            }
        }
        fromPreset(presets.iosArm32, 'iosArm32'){
            compilations.each {
                it.extraOpts("-linker-options", "-lsqlite3")
            }
        }

        /*fromPreset(presets.iosX64, 'iosX64'){
            compilations.each {
                it.extraOpts("-linker-options", "-lsqlite3")
            }
        }*/
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation "co.touchlab.stately:stately:0.3.5-k1.3.0-a1"
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.0.0'
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
        jvmMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
            }
        }
        jvmTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }

        nativeCommonMain {
            dependencies {
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-native:1.0.0'
                implementation 'com.squareup.sqldelight:sqldelightruntimeios:1.0.0-k1.3.0-a3'
            }
        }
        nativeCommonTest { }

        /*iosMain {
            dependencies {
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-native:1.0.0'
            }
        }
        iosTest {
        }*/

        configure([iosX64Main, iosArm32Main, iosArm64Main, macosMain]) {
            dependsOn nativeCommonMain
        }

        configure([iosX64Test, iosArm32Test, iosArm64Test, macosTest]) {
            dependsOn nativeCommonTest
        }
    }
}

configurations {
    compileClasspath
}

void mergeCppOutput(String archFolder, String archZip){
    ant.zip(
            update: "true",
            destfile: "${project.buildDir}/classes/kotlin/$archFolder/main/sqliter.klib"
    ) {
        zipfileset(
                dir: "${project.projectDir}/../KotlinCpp/bcdist/$archZip",
                prefix: "targets/$archZip/native"
        ) {
            include(name: '**.bc')
        }
    }
}

task mergeCppAll(dependsOn:build) {
    doLast {
        mergeCppOutput("iosArm32", "ios_arm32")
        mergeCppOutput("iosArm64", "ios_arm64")
        mergeCppOutput("iosX64", "ios_x64")
        mergeCppOutput("macos", "macos_x64")
    }
}

apply from: 'gradle/configpublish.gradle'

tasks.findByName("publish").dependsOn("mergeCppAll")